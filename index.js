// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const { Telegraf } = require('telegraf');
const mongoose = require('mongoose');
const http = require('http'); // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è Render
require('dotenv').config();

// –¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤
const CLIENT_BOT_TOKEN = process.env.CLIENT_BOT_TOKEN;
const COURIER_BOT_TOKEN = process.env.COURIER_BOT_TOKEN;

console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
console.log('–¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', 
  CLIENT_BOT_TOKEN ? '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç: –î–∞' : '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç: –ù–µ—Ç', 
  COURIER_BOT_TOKEN ? '–ö—É—Ä—å–µ—Ä—Å–∫–∏–π –±–æ—Ç: –î–∞' : '–ö—É—Ä—å–µ—Ä—Å–∫–∏–π –±–æ—Ç: –ù–µ—Ç');

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render
const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('–ú—É—Å–æ—Ä–û–ö –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!\n');
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
const { MongoClient, ServerApiVersion } = require('mongodb');
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/musorOK';

mongoose.connect(MONGODB_URI, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true
  },
  dbName: 'musorOK'
})
  .then(() => {
    console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    startBots();
  })
  .catch(err => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
    process.exit(1);
  });

// –°—Ö–µ–º—ã –¥–ª—è MongoDB
// –°—Ö–µ–º–∞ –∫—É—Ä—å–µ—Ä–∞
const courierSchema = new mongoose.Schema({
  userId: { type: Number, required: true, unique: true },
  fullName: { type: String },
  phone: { type: String },
  city: { type: String },
  district: { type: String },
  verified: { type: Boolean, default: false },
  location: {
    latitude: Number,
    longitude: Number,
    lastUpdated: Date
  },
  available: { type: Boolean, default: false },
  currentOrder: { type: mongoose.Schema.Types.ObjectId, ref: 'Order', default: null },
  cardNumber: { type: String },
  rating: { type: Number, default: 0 }
});

// –°—Ö–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–∞
const clientSchema = new mongoose.Schema({
  userId: { type: Number, required: true, unique: true },
  addresses: [{
    street: String,
    houseNumber: String,
    entrance: String,
    floor: String,
    apartment: String,
    location: {
      latitude: Number,
      longitude: Number
    }
  }],
  phone: { type: String },
  orders: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Order' }]
});

// –°—Ö–µ–º–∞ –∑–∞–∫–∞–∑–∞
const orderSchema = new mongoose.Schema({
  clientId: { type: mongoose.Schema.Types.ObjectId, ref: 'Client', required: true },
  address: {
    street: String,
    houseNumber: String,
    entrance: String,
    floor: String,
    apartment: String,
    location: {
      latitude: Number,
      longitude: Number
    }
  },
  status: { 
    type: String, 
    enum: ['created', 'assigned', 'inProgress', 'completed', 'cancelled'],
    default: 'created'
  },
  courierId: { type: mongoose.Schema.Types.ObjectId, ref: 'Courier' },
  price: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now },
  completedAt: Date
});

// –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏
const Courier = mongoose.model('Courier', courierSchema);
const Client = mongoose.model('Client', clientSchema);
const Order = mongoose.model('Order', orderSchema);

// –°–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const clientSessions = {};
const courierSessions = {};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤
function startBots() {
  // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–æ–≤
  const clientBot = new Telegraf(CLIENT_BOT_TOKEN);
  const courierBot = new Telegraf(COURIER_BOT_TOKEN);
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞
  async function findNearestCourier(location) {
    const availableCouriers = await Courier.find({ 
      available: true, 
      verified: true,
      'location.latitude': { $exists: true },
      'location.longitude': { $exists: true }
    });
    
    if (availableCouriers.length === 0) return null;
    
    // –ü—Ä–æ—Å—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    const couriersWithDistance = availableCouriers.map(courier => {
      const distance = Math.sqrt(
        Math.pow(location.latitude - courier.location.latitude, 2) + 
        Math.pow(location.longitude - courier.location.longitude, 2)
      );
      
      return { courier, distance };
    });
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    couriersWithDistance.sort((a, b) => a.distance - b.distance);
    
    return couriersWithDistance[0].courier;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  async function geocodeAddress(address) {
    // –ó–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    return {
      latitude: 55.7558, // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã
      longitude: 37.6173
    };
  }

  // –ö–õ–ò–ï–ù–¢–°–ö–ò–ô –ë–û–¢

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  clientBot.start(async (ctx) => {
    console.log('–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞:', ctx.from.id);
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –±–∞–∑–µ
    let client = await Client.findOne({ userId });
    
    if (!client) {
      client = new Client({ userId });
      await client.save();
      console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:', userId);
    }
    
    clientSessions[userId] = { step: 'idle' };
    
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ú—É—Å–æ—Ä–û–ö! –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', {
      reply_markup: {
        keyboard: [
          [{ text: 'üöÆ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞' }]
        ],
        resize_keyboard: true
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–∫–∞–∑–∞ –≤—ã–Ω–æ—Å–∞ –º—É—Å–æ—Ä–∞
  clientBot.hears('üöÆ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞', (ctx) => {
    const userId = ctx.from.id;
    clientSessions[userId] = { step: 'address' };
    
    ctx.reply('üè† –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞ –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞)', {
      reply_markup: {
        keyboard: [
          [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å' }]
        ],
        resize_keyboard: true
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  clientBot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    
    if (text === '–û—Ç–º–µ–Ω–∏—Ç—å') {
      clientSessions[userId] = { step: 'idle' };
      return ctx.reply('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', {
        reply_markup: {
          keyboard: [
            [{ text: 'üöÆ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞' }]
          ],
          resize_keyboard: true
        }
      });
    }
    
    if (!clientSessions[userId]) {
      clientSessions[userId] = { step: 'idle' };
      return ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', {
        reply_markup: {
          keyboard: [
            [{ text: 'üöÆ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞' }]
          ],
          resize_keyboard: true
        }
      });
    }
    
    const session = clientSessions[userId];
    
    switch (session.step) {
      case 'address':
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥—ä–µ–∑–¥–∞
        session.address = {
          street: text,
          houseNumber: ''
        };
        
        session.step = 'entrance';
        
        ctx.reply('üö™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞, —ç—Ç–∞–∂–∞ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º', {
          reply_markup: {
            keyboard: [
              [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å' }]
            ],
            resize_keyboard: true
          }
        });
        break;
        
      case 'entrance':
        // –î–µ—Ç–∞–ª–∏ –ø–æ–¥—ä–µ–∑–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        let entrance = '1', floor = '1', apartment = '1';
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–≤–æ–¥
        const entranceDetails = text.split(',').map(part => part.trim());
        if (entranceDetails.length >= 3) {
          entrance = entranceDetails[0];
          floor = entranceDetails[1];
          apartment = entranceDetails[2];
        } else {
          // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
          entrance = text;
        }
        
        session.address.entrance = entrance;
        session.address.floor = floor;
        session.address.apartment = apartment;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        session.address.location = await geocodeAddress(session.address.street);
        
        session.step = 'confirm';
        session.price = 149; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
        
        ctx.reply(`üîÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
        
–ê–¥—Ä–µ—Å: ${session.address.street}
–ü–æ–¥—ä–µ–∑–¥: ${session.address.entrance}
–≠—Ç–∞–∂: ${session.address.floor}
–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${session.address.apartment}

–°—Ç–æ–∏–º–æ—Å—Ç—å: ${session.price}‚ÇΩ`, {
          reply_markup: {
            keyboard: [
              [{ text: '–û–ø–ª–∞—Ç–∏—Ç—å' }],
              [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å' }],
              [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å' }]
            ],
            resize_keyboard: true
          }
        });
        break;
        
      case 'confirm':
        if (text === '–û–ø–ª–∞—Ç–∏—Ç—å') {
          try {
            const client = await Client.findOne({ userId });
            
            if (!client) {
              throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            const newOrder = new Order({
              clientId: client._id,
              address: session.address,
              price: session.price
            });
            
            await newOrder.save();
            console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:', newOrder._id);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
            if (!client.orders) client.orders = [];
            client.orders.push(newOrder._id);
            await client.save();
            
            ctx.reply('‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω! –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞...');
            
            // –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            setTimeout(async () => {
              try {
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä—å–µ—Ä–æ–≤ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤)
                const couriers = await Courier.find({ verified: true, available: true });
                
                if (couriers.length > 0) {
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –∫—É—Ä—å–µ—Ä—É
                  const courier = couriers[0];
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                  newOrder.status = 'assigned';
                  newOrder.courierId = courier._id;
                  await newOrder.save();
                  
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É
                  courierBot.telegram.sendMessage(courier.userId, `üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!
                  
–ê–¥—Ä–µ—Å: ${session.address.street}
–ü–æ–¥—ä–µ–∑–¥: ${session.address.entrance}
–≠—Ç–∞–∂: ${session.address.floor}
–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${session.address.apartment}

–°—Ç–æ–∏–º–æ—Å—Ç—å: ${session.price}‚ÇΩ`, {
                    reply_markup: {
                      keyboard: [
                        [{ text: `–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ ‚Ññ${newOrder._id}` }],
                        [{ text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑' }]
                      ],
                      resize_keyboard: true
                    }
                  });
                  
                  ctx.reply('üëç –ö—É—Ä—å–µ—Ä –Ω–∞–π–¥–µ–Ω! –û–Ω —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.');
                } else {
                  ctx.reply('‚è≥ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤. –ú—ã –Ω–∞–∑–Ω–∞—á–∏–º –∫—É—Ä—å–µ—Ä–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è.');
                }
              } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫—É—Ä—å–µ—Ä–∞:', err);
                ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫—É—Ä—å–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
              }
            }, 2000);
            
            // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
            clientSessions[userId] = { step: 'idle' };
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            setTimeout(() => {
              ctx.reply('–ß—Ç–æ –¥–∞–ª—å—à–µ?', {
                reply_markup: {
                  keyboard: [
                    [{ text: 'üöÆ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞' }],
                    [{ text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' }]
                  ],
                  resize_keyboard: true
                }
              });
            }, 4000);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', err);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          }
        } else if (text === '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å') {
          session.step = 'address';
          ctx.reply('üè† –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞ –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞)', {
            reply_markup: {
              keyboard: [
                [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å' }]
              ],
              resize_keyboard: true
            }
          });
        }
        break;
        
      default:
        // –ï—Å–ª–∏ —à–∞–≥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑
        ctx.reply('–î–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã–Ω–æ—Å–∞ –º—É—Å–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', {
          reply_markup: {
            keyboard: [
              [{ text: 'üöÆ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞' }]
            ],
            resize_keyboard: true
          }
        });
    }
  });
  
  // –ö–£–†–¨–ï–†–°–ö–ò–ô –ë–û–¢

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
  courierBot.start(async (ctx) => {
    console.log('–ö—É—Ä—å–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞:', ctx.from.id);
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—å–µ—Ä –≤ –±–∞–∑–µ
    let courier = await Courier.findOne({ userId });
    
    if (!courier) {
      courier = new Courier({ userId });
      await courier.save();
      console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫—É—Ä—å–µ—Ä:', userId);
      
      courierSessions[userId] = { step: 'new' };
      
      ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –ú—É—Å–æ—Ä–û–ö.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –ø—Ä–æ–π–¥–∏ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.', {
        reply_markup: {
          keyboard: [
            [{ text: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' }],
            [{ text: '–û —Å–µ—Ä–≤–∏—Å–µ' }]
          ],
          resize_keyboard: true
        }
      });
    } else if (!courier.verified) {
      courierSessions[userId] = { step: 'registration' };
      
      ctx.reply('–ü—Ä–æ–¥–æ–ª–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?', {
        reply_markup: {
          keyboard: [
            [{ text: '–í–≤–µ—Å—Ç–∏ –§–ò–û' }],
            [{ text: '–£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω' }],
            [{ text: '–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }],
            [{ text: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞' }]
          ],
          resize_keyboard: true
        }
      });
    } else {
      courierSessions[userId] = { step: 'main' };
      
      const availabilityButton = courier.available ? 
        { text: 'üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É' } : 
        { text: 'üü¢ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' };
      
      ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
          keyboard: [
            [availabilityButton],
            [{ text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' }],
            [{ text: '–ú–æ–π —Å—á—ë—Ç' }],
            [{ text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π', request_location: true }]
          ],
          resize_keyboard: true
        }
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  courierBot.hears('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', (ctx) => {
    const userId = ctx.from.id;
    courierSessions[userId] = { step: 'fullName' };
    
    ctx.reply('üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–æ–≤!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:', {
      reply_markup: {
        keyboard: [
          [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å' }]
        ],
        resize_keyboard: true
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–û —Å–µ—Ä–≤–∏—Å–µ"
  courierBot.hears('–û —Å–µ—Ä–≤–∏—Å–µ', (ctx) => {
    ctx.reply('–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n\n‚úÖ –ë–µ—Ä—ë—à—å –∑–∞–∫–∞–∑ –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å\n‚úÖ –ó–∞–±–∏—Ä–∞–µ—à—å –º—É—Å–æ—Ä –æ—Ç –¥–≤–µ—Ä–∏\n‚úÖ –ü—Ä–∏—Å—ã–ª–∞–µ—à—å —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞\n‚úÖ –í–µ—á–µ—Ä–æ–º –≤ 21:00 –ø–æ–ª—É—á–∞–µ—à—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É', {
      reply_markup: {
        keyboard: [
          [{ text: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å' }],
          [{ text: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' }]
        ],
        resize_keyboard: true
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å"
  courierBot.hears(['–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å', 'üü¢ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'], async (ctx) => {
    const userId = ctx.from.id;
    const courier = await Courier.findOne({ userId });
    
    if (!courier || !courier.verified) {
      courierSessions[userId] = { step: 'fullName' };
      
      return ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:');
    }
    
    courier.available = true;
    await courier.save();
    
    courierSessions[userId] = { step: 'main' };
    
    ctx.reply('–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã.', {
      reply_markup: {
        keyboard: [
          [{ text: 'üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É' }],
          [{ text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' }],
          [{ text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π', request_location: true }]
        ],
        resize_keyboard: true
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫—É—Ä—å–µ—Ä–∞
  courierBot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    
    if (!courierSessions[userId]) {
      courierSessions[userId] = { step: 'new' };
      
      return ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start');
    }
    
    const session = courierSessions[userId];
    let courier = await Courier.findOne({ userId });
    
    // –ï—Å–ª–∏ –∫—É—Ä—å–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º
    if (!courier) {
      courier = new Courier({ userId });
      await courier.save();
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–º–µ–Ω–∏—Ç—å"
    if (text === '–û—Ç–º–µ–Ω–∏—Ç—å') {
      courierSessions[userId] = { step: 'main' };
      
      return ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
        reply_markup: {
          keyboard: [
            [{ text: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' }],
            [{ text: '–û —Å–µ—Ä–≤–∏—Å–µ' }]
          ],
          resize_keyboard: true
        }
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"
    if (text === 'üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É') {
      courier.available = false;
      await courier.save();
      
      return ctx.reply('–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –°–ø–∞—Å–∏–±–æ!', {
        reply_markup: {
          keyboard: [
            [{ text: 'üü¢ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' }],
            [{ text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' }],
            [{ text: '–ú–æ–π —Å—á—ë—Ç' }]
          ],
          resize_keyboard: true
        }
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
    if (text === '–ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
      const orders = await Order.find({ courierId: courier._id }).sort('-createdAt').limit(5);
      
      if (orders.length === 0) {
        return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
      }
      
      let message = '–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n';
      
      for (const order of orders) {
        const statusMap = {
          'created': '‚è≥ –°–æ–∑–¥–∞–Ω',
          'assigned': 'üîÑ –ù–∞–∑–Ω–∞—á–µ–Ω',
          'inProgress': 'üö∂‚Äç‚ôÇÔ∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
          'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω',
          'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
        };
        
        message += `üìã –ó–∞–∫–∞–∑ –æ—Ç ${new Date(order.createdAt).toLocaleDateString()}\n`;
        message += `üè† ${order.address.street}, –ø–æ–¥—ä–µ–∑–¥ ${order.address.entrance}\n`;
        message += `üí∞ –°—É–º–º–∞: ${order.price}‚ÇΩ\n`;
        message += `üîÑ –°—Ç–∞—Ç—É—Å: ${statusMap[order.status] || order.status}\n\n`;
      }
      
      return ctx.reply(message);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–π —Å—á—ë—Ç"
    if (text === '–ú–æ–π —Å—á—ë—Ç') {
      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
      const completed = await Order.find({ 
        courierId: courier._id, 
        status: 'completed' 
      });
      
      const totalEarnings = completed.reduce((sum, order) => sum + order.price, 0);
      
      return ctx.reply(`üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ:
      
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${completed.length}
–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: ${totalEarnings}‚ÇΩ
–í—ã–ø–ª–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è –≤ 21:00: ${totalEarnings}‚ÇΩ

–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.`);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    switch (session.step) {
      case 'fullName':
        courier.fullName = text;
        await courier.save();
        
        session.step = 'city';
        
        ctx.reply('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–æ—Ä–æ–¥, –†–∞–π–æ–Ω\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ–Ω–∑–∞, –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π');
        break;
        
      case 'city':
        const cityParts = text.split(',');
        
        if (cityParts.length >= 2) {
          courier.city = cityParts[0].trim();
          courier.district = cityParts[1].trim();
        } else {
          courier.city = text.trim();
          courier.district = '';
        }
        
        await courier.save();
        
        session.step = 'phone';
        
        ctx.reply('üì± –ï—â—ë –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ - –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –º—ã —Å–º–æ–∂–µ–º —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', {
          reply_markup: {
            keyboard: [
              [{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact: true }],
              [{ text: '–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é' }]
            ],
            resize_keyboard: true
          }
        });
        break;
        
      case 'phone':
        if (text === '–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é') {
          return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:');
        }
        
        courier.phone = text;
        await courier.save();
        
        session.step = 'passport';
        
        ctx.reply('üì∑ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏.\n\n–°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ä—É–∫–∞—Ö. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ.\n\n–≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫–∞–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏ –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö üëç');
        break;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  courierBot.on('photo', async (ctx) => {
    const userId = ctx.from.id;
    const session = courierSessions[userId];
    
    if (session && session.step === 'passport') {
      const courier = await Courier.findOne({ userId });
      
      if (courier) {
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ä–∞–∑—É –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
        courier.verified = true;
        await courier.save();
        
        ctx.reply('‚úÖ –í–∞—à –ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å.', {
          reply_markup: {
            keyboard: [
              [{ text: 'üü¢ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' }],
              [{ text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' }],
              [{ text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π', request_location: true }]
            ],
            resize_keyboard: true
          }
        });
        
        courierSessions[userId] = { step: 'main' };
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  courierBot.on('location', async (ctx) => {
    const userId = ctx.from.id;
    const location = ctx.message.location;
    
    const courier = await Courier.findOne({ userId });
    
    if (courier) {
      courier.location = {
        latitude: location.latitude,
        longitude: location.longitude,
        lastUpdated: new Date()
      };
      
      await courier.save();
      
      ctx.reply('‚úÖ –í–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.', {
        reply_markup: {
          keyboard: [
            [{ text: courier.available ? 'üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É' : 'üü¢ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' }],
            [{ text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' }],
            [{ text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π', request_location: true }]
          ],
          resize_keyboard: true
        }
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
  courierBot.on('contact', async (ctx) => {
    const userId = ctx.from.id;
    const session = courierSessions[userId];
    
    if (session && session.step === 'phone') {
      const courier = await Courier.findOne({ userId });
      
      if (courier) {
        courier.phone = ctx.message.contact.phone_number;
        await courier.save();
        
        session.step = 'passport';
        
        ctx.reply('üì∑ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏.\n\n–°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ä—É–∫–∞—Ö. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ.\n\n–≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫–∞–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏ –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö üëç');
      }
    }
  });

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
  console.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤...');
  
  clientBot.launch()
    .then(() => console.log('–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞:', err));
  
  courierBot.launch()
    .then(() => console.log('–ö—É—Ä—å–µ—Ä—Å–∫–∏–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫—É—Ä—å–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞:', err));
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (Ctrl+C)
  process.once('SIGINT', () => {
    clientBot.stop('SIGINT');
    courierBot.stop('SIGINT');
    console.log('–ë–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  });
  
  process.once('SIGTERM', () => {
    clientBot.stop('SIGTERM');
    courierBot.stop('SIGTERM');
    console.log('–ë–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  });
}
